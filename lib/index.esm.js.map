{"version":3,"file":"index.esm.js","sources":["../src/constant.js","../src/utils.js","../src/cell.js","../src/export.js","../src/extra.js","../src/index.js","../src/header.js","../src/body.js"],"sourcesContent":["export const CELL_TYPE = {\r\n    IMAGE: 'image'\r\n}\r\n\r\nexport const DEFAULTS = {\r\n    TABLE_STYLE: {\r\n        'font-family': '宋体',\r\n        'font-size': '11pt'\r\n    },\r\n\r\n    CELL_STYLE: {\r\n        'text-align': 'center',\r\n        'vertical-align': 'middle',\r\n    },\r\n\r\n    DEFAULT_SHEET_NAME: \"Sheet1\",\r\n\r\n    DEFAULT_FILE_NAME: \"文件\",\r\n\r\n    IMAGE_HEIGHT: 100,\r\n\r\n    IMAGE_WIDTH: 100,\r\n}\r\n\r\n","export const serializeStyle = (style) => {\r\n    if (typeof style === 'object') {\r\n        return Object.entries(style).map(([key, value]) => `${key}:${value}`).join(';') + ';';\r\n    }\r\n    else {\r\n        return style;\r\n    }\r\n}","import { CELL_TYPE, DEFAULTS } from \"./constant\";\r\nimport { serializeStyle } from \"./utils\";\r\n\r\nexport const getCellStyle = (value, row, column, rowIndex, columnIndex) => {\r\n    const { type, cellStyle, width, height } = column;\r\n\r\n    let style = undefined;\r\n\r\n    if (typeof cellStyle === 'function') {\r\n        style = cellStyle({ value, row, rowIndex, columnIndex });\r\n    }\r\n    else {\r\n        style = cellStyle;\r\n    }\r\n\r\n    let composeStyle = {\r\n        ...DEFAULTS.CELL_STYLE,\r\n        ...style\r\n    }\r\n\r\n    if (type === CELL_TYPE.IMAGE) {\r\n        composeStyle.width = (width || DEFAULTS.IMAGE_WIDTH) + 'px';\r\n        composeStyle.height = (height || DEFAULTS.IMAGE_HEIGHT) + 'px';\r\n    }\r\n\r\n    return serializeStyle(composeStyle);\r\n}\r\n\r\nexport const getCellValue = (row, column, rowIndex, columnIndex) => {\r\n    const { formatter, prop } = column;\r\n\r\n    const value = row[prop] || '';\r\n\r\n    if (typeof formatter !== 'function') {\r\n        return value;\r\n    }\r\n    else {\r\n        return formatter(value, row, rowIndex);\r\n    }\r\n}\r\n\r\nexport const getSpanContent = (spanMethod, ctx) => {\r\n    if (typeof spanMethod !== 'function') return '';\r\n\r\n    const spanResult = spanMethod(ctx);\r\n\r\n    if (!spanResult) return '';\r\n\r\n    const { rowspan, colspan } = spanResult;\r\n\r\n    return {\r\n        content: `rowspan=\"${rowspan}\" colspan=\"${colspan}\"`,\r\n        needDelete: rowspan === 0 && colspan === 0\r\n    };\r\n}\r\n\r\nexport const getTdContent = (row, column, rowIndex, columnIndex, spanMethod) => {\r\n    const { type, width, height } = column;\r\n\r\n    const value = getCellValue(row, column, rowIndex, columnIndex);\r\n\r\n    const td_style = getCellStyle(value, row, column, rowIndex, columnIndex);\r\n\r\n    // 合并单元格处理\r\n    const { content: span_content, needDelete } = getSpanContent(spanMethod, { row, column, rowIndex, columnIndex });\r\n\r\n    if (needDelete) return '';\r\n\r\n    if (!value) return `<td ${span_content} style=\"${td_style}\"></td>`;\r\n\r\n    if (type === CELL_TYPE.IMAGE) {\r\n        return `<td ${span_content} style=\"${td_style}\"><img src=\"${value}\" width=\"${width || DEFAULTS.IMAGE_WIDTH}\" height=\"${height || DEFAULTS.IMAGE_HEIGHT}\" /></td>`;\r\n    }\r\n    else {\r\n        return `<td ${span_content} style=\"${td_style}\"><span>${value}</span></td>`;\r\n    }\r\n}\r\n","import { DEFAULTS } from \"./constant\";\r\nimport { serializeStyle } from \"./utils\";\r\n\r\nconst BASE64_PREFIX = 'data:application/vnd.ms-excel;base64,';\r\nconst TEMPLATE =\r\n    `<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <!--[if gte mso 9]>\r\n            <xml>\r\n                <x:ExcelWorkbook>\r\n                    <x:ExcelWorksheets>\r\n                        <x:ExcelWorksheet>\r\n                            <x:Name>{worksheet}</x:Name>\r\n                            <x:WorksheetOptions>\r\n                                <x:DisplayGridlines/>\r\n                            </x:WorksheetOptions>\r\n                        </x:ExcelWorksheet>\r\n                    </x:ExcelWorksheets>\r\n                </x:ExcelWorkbook>\r\n            </xml>\r\n            <![endif]-->\r\n        </head>\r\n        <body>\r\n            <table style=\"{style}\">{table}</table>\r\n        </body>\r\n    </html>`;\r\n\r\nconst base64 = (s) => window.btoa(unescape(encodeURIComponent(s)));\r\n\r\nconst format = (s, c) => s.replace(/{(\\w+)}/g, (m, p) => c[p]);\r\n\r\nexport default ({ table, sheetName, fileName, style }) => {\r\n\r\n    const ctx = {\r\n        worksheet: sheetName || DEFAULTS.DEFAULT_SHEET_NAME,\r\n        table,\r\n        style: serializeStyle({\r\n            ...DEFAULTS.TABLE_STYLE,\r\n            ...style\r\n        })\r\n    }\r\n\r\n    // 创建下载\r\n    let link = document.createElement('a');\r\n    link.setAttribute('href', BASE64_PREFIX + base64(format(TEMPLATE, ctx)));\r\n    link.setAttribute('download', fileName || DEFAULTS.DEFAULT_FILE_NAME);\r\n    link.click();\r\n}","import { serializeStyle } from \"./utils\";\r\n\r\nexport const createExtraBlockString = (columns, blockTag) => {\r\n    const ths = columns.map(column => {\r\n        const { label, width, style, span } = column;\r\n\r\n        const styleStr = serializeStyle(style);\r\n\r\n        let spanContent = '';\r\n\r\n        if (span) {\r\n            const { colspan, rowspan } = span;\r\n            if (colspan === 0 && rowspan === 0) {\r\n                return '';\r\n            }\r\n            spanContent = `${colspan ? ('colspan=\"' + colspan + '\"') : ''}${rowspan ? ('rowspan=\"' + rowspan + '\"') : ''}`;\r\n        }\r\n\r\n        return `<th ${spanContent} style=\"${styleStr}\" width=\"${width}\"> ${label} </th>`;\r\n    })\r\n\r\n    return `<${blockTag}><tr>${ths.join('')}</tr></${blockTag}>`;\r\n}","import { createBodyString } from './body';\r\nimport { createHeaderString } from './header';\r\nimport startExport from './export';\r\nimport { createExtraBlockString } from './extra';\r\n// import startExportIE from './exportIE';\r\n\r\nexport default ({ columns, data, fileName, sheetName, style, spanMethod, headerRows, footerRows }) => {\r\n    const extraHeaders = (headerRows || []).map(columns => createExtraBlockString(columns, 'thead')).join('');\r\n    const thead = createHeaderString(columns);\r\n    const tbody = createBodyString(columns, data, spanMethod);\r\n    const extraFooters = (footerRows || []).map(columns => createExtraBlockString(columns, 'tfoot')).join('');\r\n\r\n    const table = extraHeaders + thead + tbody + extraFooters;\r\n\r\n    startExport({\r\n        table,\r\n        fileName,\r\n        sheetName,\r\n        style\r\n    });\r\n}","import { serializeStyle } from \"./utils\";\r\n\r\nexport const createHeaderString = (columns) => {\r\n    const ths = columns.map(column => {\r\n        const { label, width, style, span } = column;\r\n\r\n        const styleStr = serializeStyle(style);\r\n\r\n        let spanContent = '';\r\n\r\n        if (span) {\r\n            const { colspan, rowspan } = span;\r\n            if (colspan === 0 && rowspan === 0) {\r\n                return '';\r\n            }\r\n            spanContent = `${colspan ? ('colspan=\"' + colspan + '\"') : ''}${rowspan ? ('rowspan=\"' + rowspan + '\"') : ''}`;\r\n        }\r\n\r\n        return `<th ${spanContent} style=\"${styleStr}\" width=\"${width}\"> ${label} </th>`;\r\n    })\r\n\r\n    return `<thead><tr>${ths.join('')}</tr></thead>`;\r\n}","import { getTdContent } from \"./cell\";\r\n\r\nexport const createBodyString = (columns, rows, spanMethod) => {\r\n    let tbody = '<tbody>';\r\n\r\n    const rows_len = rows.length;\r\n    const columns_len = columns.length;\r\n\r\n    for (let i = 0; i < rows_len; i++) {\r\n        const row = rows[i];\r\n\r\n        tbody += `<tr>`;\r\n\r\n        for (let j = 0; j < columns_len; j++) {\r\n            const column = columns[j];\r\n            tbody += getTdContent(row, column, i, j, spanMethod);\r\n        }\r\n\r\n        tbody += '</tr>';\r\n    }\r\n\r\n    tbody += '</tbody>';\r\n\r\n    return tbody;\r\n}"],"names":["CELL_TYPE","DEFAULTS","serializeStyle","style","_typeof","Object","entries","map","_ref","_ref2","_slicedToArray","key","value","join","getTdContent","row","column","rowIndex","columnIndex","spanMethod","type","width","height","formatter","prop","getCellValue","td_style","cellStyle","undefined","composeStyle","getCellStyle","getSpanContent","ctx","spanResult","rowspan","colspan","content","needDelete","span_content","concat","startExport","c","table","sheetName","fileName","worksheet","_objectSpread","link","document","createElement","setAttribute","s","window","btoa","unescape","encodeURIComponent","base64","replace","m","p","click","createExtraBlockString","columns","blockTag","ths","label","span","styleStr","spanContent","index","data","headerRows","footerRows","extraHeaders","thead","createHeaderString","tbody","rows","rows_len","length","columns_len","i","j","createBodyString","extraFooters"],"mappings":"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"}