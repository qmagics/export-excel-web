{"version":3,"file":"index.js","sources":["../src/constant.js","../src/utils.js","../src/cell.js","../src/body.js","../src/header.js","../src/export.js","../src/extra.js","../src/index.js"],"sourcesContent":["export const CELL_TYPE = {\r\n    IMAGE: 'image'\r\n}\r\n\r\nexport const DEFAULTS = {\r\n    TABLE_STYLE: {\r\n        'font-family': '宋体',\r\n        'font-size': '11pt'\r\n    },\r\n\r\n    CELL_STYLE: {\r\n        'text-align': 'center',\r\n        'vertical-align': 'middle',\r\n    },\r\n\r\n    DEFAULT_SHEET_NAME: \"Sheet1\",\r\n\r\n    DEFAULT_FILE_NAME: \"文件\",\r\n\r\n    IMAGE_HEIGHT: 100,\r\n\r\n    IMAGE_WIDTH: 100,\r\n}\r\n\r\n","export const serializeStyle = (style) => {\r\n    if (typeof style === 'object') {\r\n        return Object.entries(style).map(([key, value]) => value ? `${key}:${value}` : '').filter(i => !!i).join(';') + ';';\r\n    }\r\n    else {\r\n        return style;\r\n    }\r\n}\r\n\r\n// 转换用户配置的columns格式：多级表头的情况\r\nexport const parseColumns = (columns) => {\r\n    // 用于多级表头展示的组\r\n    const columnsGroup = [];\r\n\r\n    // 用于表体显示的列配置项\r\n    const bodyColumns = [];\r\n\r\n    // 递归填值\r\n    function fillGroup(curDepth, items) {\r\n        columnsGroup[curDepth] = [];\r\n\r\n        let next_items = [];\r\n\r\n        items.forEach(item => {\r\n            item.colspan = 1;\r\n            item.depth = curDepth;\r\n            item.hasChildren = !!(item.children?.length);\r\n\r\n            if (item.hasChildren) {\r\n                item.children.forEach(child => {\r\n                    child.parent = item;\r\n                });\r\n                item.colspan = 0;\r\n                next_items = [...next_items, ...item.children];\r\n            }\r\n\r\n            delete item.children;\r\n            columnsGroup[curDepth].push(item);\r\n        });\r\n\r\n        if (next_items?.length) {\r\n            fillGroup(curDepth + 1, next_items);\r\n        }\r\n    }\r\n\r\n    // 第一步\r\n    fillGroup(0, columns);\r\n\r\n    // 第二步\r\n    const totalDepth = columnsGroup.length - 1;\r\n    for (let i = totalDepth; i >= 0; i--) {\r\n        const columns = columnsGroup[i];\r\n\r\n        const bColumnsChunk = [];\r\n\r\n        columns.forEach(column => {\r\n            const { parent, hasChildren, colspan, depth } = column;\r\n            if (parent) {\r\n                column.parent.colspan += colspan;\r\n            }\r\n\r\n            if (!hasChildren) {\r\n                column.rowspan = (totalDepth - i) + 1;\r\n            }\r\n\r\n            if (!hasChildren || depth === totalDepth) {\r\n                bColumnsChunk.push(column);\r\n            }\r\n        })\r\n\r\n        bodyColumns.unshift(...bColumnsChunk);\r\n    }\r\n\r\n    return {\r\n        columnsGroup,\r\n        bodyColumns\r\n    };\r\n}","import { CELL_TYPE, DEFAULTS } from \"./constant\";\r\nimport { serializeStyle } from \"./utils\";\r\n\r\nconst getImageWidth = (imageWidth, ctx) => {\r\n    if (!imageWidth) return DEFAULTS.IMAGE_WIDTH;\r\n\r\n    if (typeof imageWidth === 'number') {\r\n        return imageWidth;\r\n    }\r\n    else if (typeof imageWidth === 'function') {\r\n        return imageWidth(ctx);\r\n    }\r\n}\r\n\r\nconst getImageHeight = (imageHeight, ctx) => {\r\n    if (!imageHeight) return DEFAULTS.IMAGE_HEIGHT;\r\n\r\n    if (typeof imageHeight === 'number') {\r\n        return imageHeight;\r\n    }\r\n    else if (typeof imageHeight === 'function') {\r\n        return imageHeight(ctx);\r\n    }\r\n}\r\n\r\nexport const getCellProps = (value, row, column, rowIndex, columnIndex) => {\r\n    const { type, cellStyle, width, imageHeight, imageWidth } = column;\r\n\r\n    let style = undefined;\r\n\r\n    if (typeof cellStyle === 'function') {\r\n        style = cellStyle({ value, row, rowIndex, columnIndex });\r\n    }\r\n    else {\r\n        style = cellStyle;\r\n    }\r\n\r\n    let composeStyle = {\r\n        ...DEFAULTS.CELL_STYLE,\r\n        width: width ? (width + 'px') : '',\r\n        ...style\r\n    }\r\n\r\n    let imageProps = {};\r\n\r\n    if (type === CELL_TYPE.IMAGE) {\r\n        imageProps.width = getImageWidth(imageWidth, { value, row, column, rowIndex, columnIndex });\r\n        imageProps.height = getImageHeight(imageHeight, { value, row, column, rowIndex, columnIndex });\r\n        composeStyle.height = imageProps.width + 'px';\r\n\r\n        if (!width) {\r\n            composeStyle.width = imageProps.width + 'px';\r\n        }\r\n    }\r\n\r\n    return {\r\n        cellStyle: serializeStyle(composeStyle),\r\n        imageProps\r\n    }\r\n}\r\n\r\nexport const getCellValue = (row, column, rowIndex, columnIndex) => {\r\n    const { formatter, prop } = column;\r\n\r\n    const value = row[prop] || '';\r\n\r\n    if (typeof formatter !== 'function') {\r\n        return value;\r\n    }\r\n    else {\r\n        return formatter({ value, row, rowIndex, columnIndex });\r\n    }\r\n}\r\n\r\nexport const getSpanContent = (spanMethod, ctx) => {\r\n    if (typeof spanMethod !== 'function') return '';\r\n\r\n    const spanResult = spanMethod(ctx);\r\n\r\n    if (!spanResult) return '';\r\n\r\n    const { rowspan, colspan } = spanResult;\r\n\r\n    return {\r\n        content: `rowspan=\"${rowspan}\" colspan=\"${colspan}\"`,\r\n        needDelete: rowspan === 0 && colspan === 0\r\n    };\r\n}\r\n\r\nexport const getTdContent = (row, column, rowIndex, columnIndex, spanMethod) => {\r\n    const { type } = column;\r\n\r\n    const value = getCellValue(row, column, rowIndex, columnIndex);\r\n\r\n    const { cellStyle: td_style, imageProps } = getCellProps(value, row, column, rowIndex, columnIndex);\r\n\r\n    // 合并单元格处理\r\n    const { content: span_content, needDelete } = getSpanContent(spanMethod, { row, column, rowIndex, columnIndex });\r\n\r\n    if (needDelete) return '';\r\n\r\n    if (!value) return `<td ${span_content} style=\"${td_style}\"></td>`;\r\n\r\n    if (type === CELL_TYPE.IMAGE) {\r\n        return `<td ${span_content} style=\"${td_style}\"><img src=\"${value}\" width=\"${imageProps.width}\" height=\"${imageProps.height}\" /></td>`;\r\n    }\r\n    else {\r\n        return `<td ${span_content} style=\"${td_style}\"><span>${value}</span></td>`;\r\n    }\r\n}\r\n","import { getTdContent } from \"./cell\";\r\n\r\nconst getRowHeightString = ({ row, rowIndex, rowHeight }) => {\r\n    if (!rowHeight) return '';\r\n\r\n    let height = \"\";\r\n\r\n    if (typeof rowHeight === 'number') {\r\n        height = rowHeight;\r\n    }\r\n    else if (typeof rowHeight === 'function') {\r\n        height = rowHeight({ row, rowIndex });\r\n    }\r\n\r\n    return `height=\"${height}\"`;\r\n}\r\n\r\nexport const createBodyString = (columns, rows, spanMethod, rowHeight) => {\r\n    let tbody = '<tbody>';\r\n\r\n    const rows_len = rows.length;\r\n    const columns_len = columns.length;\r\n\r\n    for (let i = 0; i < rows_len; i++) {\r\n        const row = rows[i];\r\n\r\n        const row_height_str = getRowHeightString({ row, rowIndex: i, rowHeight });\r\n\r\n        tbody += `<tr ${row_height_str}>`;\r\n\r\n        for (let j = 0; j < columns_len; j++) {\r\n            const column = columns[j];\r\n            tbody += getTdContent(row, column, i, j, spanMethod);\r\n        }\r\n\r\n        tbody += '</tr>';\r\n    }\r\n\r\n    tbody += '</tbody>';\r\n\r\n    return tbody;\r\n}","import { serializeStyle } from \"./utils\";\r\n\r\nexport const createHeaderString = (columnsGroup) => {\r\n    const trs = columnsGroup.map(columns => createHeaderTr(columns))\r\n\r\n    return `<thead>${trs.join('')}</thead>`;\r\n}\r\n\r\nconst getSpanContent = (column) => {\r\n    const { rowspan, colspan } = column;\r\n\r\n    if (colspan === 0 && rowspan === 0) {\r\n        return '';\r\n    }\r\n    return `${colspan ? ('colspan=\"' + colspan + '\"') : ''} ${rowspan ? ('rowspan=\"' + rowspan + '\"') : ''}`;\r\n}\r\n\r\nexport const createHeaderTr = (columns) => {\r\n    const ths = columns.map(column => {\r\n        const { label, width, style } = column;\r\n\r\n        const styleStr = serializeStyle(style);\r\n\r\n        let spanContent = getSpanContent(column);\r\n\r\n        // if (span) {\r\n        //     const { colspan, rowspan } = span;\r\n        //     if (colspan === 0 && rowspan === 0) {\r\n        //         return '';\r\n        //     }\r\n        //     spanContent = `${colspan ? ('colspan=\"' + colspan + '\"') : ''}${rowspan ? ('rowspan=\"' + rowspan + '\"') : ''}`;\r\n        // }\r\n\r\n        return `<th ${spanContent} style=\"${styleStr}\" width=\"${width}\"> ${label} </th>`;\r\n    })\r\n\r\n    return `<tr>${ths.join('')}</tr>`;\r\n}","import { DEFAULTS } from \"./constant\";\r\nimport { serializeStyle } from \"./utils\";\r\n\r\nconst BASE64_PREFIX = 'data:application/vnd.ms-excel;base64,';\r\nconst TEMPLATE =\r\n    `<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <!--[if gte mso 9]>\r\n            <xml>\r\n                <x:ExcelWorkbook>\r\n                    <x:ExcelWorksheets>\r\n                        <x:ExcelWorksheet>\r\n                            <x:Name>{worksheet}</x:Name>\r\n                            <x:WorksheetOptions>\r\n                                <x:DisplayGridlines/>\r\n                            </x:WorksheetOptions>\r\n                        </x:ExcelWorksheet>\r\n                    </x:ExcelWorksheets>\r\n                </x:ExcelWorkbook>\r\n            </xml>\r\n            <![endif]-->\r\n        </head>\r\n        <body>\r\n            <table style=\"{style}\">{table}</table>\r\n        </body>\r\n    </html>`;\r\n\r\nconst base64 = (s) => window.btoa(unescape(encodeURIComponent(s)));\r\n\r\nconst format = (s, c) => s.replace(/{(\\w+)}/g, (m, p) => c[p]);\r\n\r\nexport default ({ table, sheetName, fileName, style }) => {\r\n\r\n    const ctx = {\r\n        worksheet: sheetName || DEFAULTS.DEFAULT_SHEET_NAME,\r\n        table,\r\n        style: serializeStyle({\r\n            ...DEFAULTS.TABLE_STYLE,\r\n            ...style\r\n        })\r\n    }\r\n\r\n    // 创建下载\r\n    let link = document.createElement('a');\r\n    link.setAttribute('href', BASE64_PREFIX + base64(format(TEMPLATE, ctx)));\r\n    link.setAttribute('download', fileName || DEFAULTS.DEFAULT_FILE_NAME);\r\n    link.click();\r\n}","import { serializeStyle } from \"./utils\";\r\n\r\nconst getSpanContent = (column) => {\r\n    const { colspan, rowspan } = column;\r\n    if (colspan === 0 && rowspan === 0) {\r\n        return '';\r\n    }\r\n    return `${colspan ? ('colspan=\"' + colspan + '\"') : ''} ${rowspan ? ('rowspan=\"' + rowspan + '\"') : ''}`;\r\n}\r\n\r\nexport const createExtraBlockString = (columns, blockTag) => {\r\n    const ths = columns.map(column => {\r\n        const { label, width, style, tag = 'td', align = 'center' } = column;\r\n\r\n        const styleStr = serializeStyle(style);\r\n\r\n        let spanContent = getSpanContent(column);\r\n\r\n        return `<${tag} ${spanContent} align=\"${align}\" style=\"${styleStr}\" width=\"${width}\"> ${label} </${tag}>`;\r\n    })\r\n\r\n    return `<${blockTag}><tr>${ths.join('')}</tr></${blockTag}>`;\r\n}","import { createBodyString } from './body';\r\nimport { createHeaderString } from './header';\r\nimport startExport from './export';\r\nimport { createExtraBlockString } from './extra';\r\nimport { parseColumns } from './utils';\r\n// import startExportIE from './exportIE';\r\n\r\nexport default ({ columns, data, fileName, sheetName, style, spanMethod, topRows = [], bottomRows = [], rowHeight, showHeader = true }) => {\r\n\r\n    const { columnsGroup, bodyColumns } = parseColumns(columns);\r\n\r\n    const thead = showHeader ? createHeaderString(columnsGroup) : '';\r\n\r\n    const tbody = createBodyString(bodyColumns, data, spanMethod, rowHeight);\r\n\r\n    const extraHeaders = (topRows || []).map(columns => createExtraBlockString(columns, 'thead')).join('');\r\n    const extraFooters = (bottomRows || []).map(columns => createExtraBlockString(columns, 'tfoot')).join('');\r\n\r\n    const table = extraHeaders + thead + tbody + extraFooters;\r\n\r\n    startExport({\r\n        table,\r\n        fileName,\r\n        sheetName,\r\n        style\r\n    });\r\n}"],"names":["CELL_TYPE","DEFAULTS","serializeStyle","style","_typeof","Object","entries","map","_ref","_ref2","_slicedToArray","key","value","filter","i","join","getCellProps","row","column","rowIndex","columnIndex","type","cellStyle","width","imageHeight","imageWidth","undefined","composeStyle","_objectSpread","imageProps","ctx","getImageWidth","height","getImageHeight","getTdContent","spanMethod","formatter","prop","getCellValue","td_style","_getCellProps","getSpanContent","spanResult","rowspan","colspan","content","needDelete","span_content","concat","getRowHeightString","rowHeight","createHeaderTr","columns","ths","label","styleStr","spanContent","startExport","c","table","sheetName","fileName","worksheet","link","document","createElement","setAttribute","s","window","btoa","unescape","encodeURIComponent","base64","replace","m","p","click","createExtraBlockString","blockTag","tag","_column$tag","align","_column$align","data","_ref$topRows","topRows","_ref$bottomRows","bottomRows","_ref$showHeader","showHeader","parseColumns","columnsGroup","bodyColumns","fillGroup","curDepth","items","_next_items","next_items","forEach","item","_item$children","depth","hasChildren","children","length","child","parent","_toConsumableArray","push","totalDepth","_loop","bColumnsChunk","unshift","apply","thead","trs","createHeaderString","tbody","rows","rows_len","columns_len","row_height_str","j","createBodyString","extraHeaders","extraFooters"],"mappings":"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"}