{"version":3,"file":"index.js","sources":["../src/constant.js","../src/utils.js","../src/cell.js","../src/body.js","../src/export.js","../src/extra.js","../src/index.js","../src/header.js"],"sourcesContent":["export const CELL_TYPE = {\r\n    IMAGE: 'image'\r\n}\r\n\r\nexport const DEFAULTS = {\r\n    TABLE_STYLE: {\r\n        'font-family': '宋体',\r\n        'font-size': '11pt'\r\n    },\r\n\r\n    CELL_STYLE: {\r\n        'text-align': 'center',\r\n        'vertical-align': 'middle',\r\n    },\r\n\r\n    DEFAULT_SHEET_NAME: \"Sheet1\",\r\n\r\n    DEFAULT_FILE_NAME: \"文件\",\r\n\r\n    IMAGE_HEIGHT: 100,\r\n\r\n    IMAGE_WIDTH: 100,\r\n}\r\n\r\n","export const serializeStyle = (style) => {\r\n    if (typeof style === 'object') {\r\n        return Object.entries(style).map(([key, value]) => value ? `${key}:${value}` : '').filter(i => !!i).join(';') + ';';\r\n    }\r\n    else {\r\n        return style;\r\n    }\r\n}","import { CELL_TYPE, DEFAULTS } from \"./constant\";\r\nimport { serializeStyle } from \"./utils\";\r\n\r\nconst getImageWidth = (imageWidth, ctx) => {\r\n    if (!imageWidth) return DEFAULTS.IMAGE_WIDTH;\r\n\r\n    if (typeof imageWidth === 'number') {\r\n        return imageWidth;\r\n    }\r\n    else if (typeof imageWidth === 'function') {\r\n        return imageWidth(ctx);\r\n    }\r\n}\r\n\r\nconst getImageHeight = (imageHeight, ctx) => {\r\n    if (!imageHeight) return DEFAULTS.IMAGE_HEIGHT;\r\n\r\n    if (typeof imageHeight === 'number') {\r\n        return imageHeight;\r\n    }\r\n    else if (typeof imageHeight === 'function') {\r\n        return imageHeight(ctx);\r\n    }\r\n}\r\n\r\nexport const getCellProps = (value, row, column, rowIndex, columnIndex) => {\r\n    const { type, cellStyle, width, imageHeight, imageWidth } = column;\r\n\r\n    let style = undefined;\r\n\r\n    if (typeof cellStyle === 'function') {\r\n        style = cellStyle({ value, row, rowIndex, columnIndex });\r\n    }\r\n    else {\r\n        style = cellStyle;\r\n    }\r\n\r\n    let composeStyle = {\r\n        ...DEFAULTS.CELL_STYLE,\r\n        width: width ? (width + 'px') : '',\r\n        ...style\r\n    }\r\n\r\n    let imageProps = {};\r\n\r\n    if (type === CELL_TYPE.IMAGE) {\r\n        imageProps.width = getImageWidth(imageWidth, { value, row, column, rowIndex, columnIndex });\r\n        imageProps.height = getImageHeight(imageHeight, { value, row, column, rowIndex, columnIndex });\r\n        composeStyle.height = imageProps.width + 'px';\r\n\r\n        if (!width) {\r\n            composeStyle.width = imageProps.width + 'px';\r\n        }\r\n    }\r\n\r\n    return {\r\n        cellStyle: serializeStyle(composeStyle),\r\n        imageProps\r\n    }\r\n}\r\n\r\nexport const getCellValue = (row, column, rowIndex, columnIndex) => {\r\n    const { formatter, prop } = column;\r\n\r\n    const value = row[prop] || '';\r\n\r\n    if (typeof formatter !== 'function') {\r\n        return value;\r\n    }\r\n    else {\r\n        return formatter({ value, row, rowIndex, columnIndex });\r\n    }\r\n}\r\n\r\nexport const getSpanContent = (spanMethod, ctx) => {\r\n    if (typeof spanMethod !== 'function') return '';\r\n\r\n    const spanResult = spanMethod(ctx);\r\n\r\n    if (!spanResult) return '';\r\n\r\n    const { rowspan, colspan } = spanResult;\r\n\r\n    return {\r\n        content: `rowspan=\"${rowspan}\" colspan=\"${colspan}\"`,\r\n        needDelete: rowspan === 0 && colspan === 0\r\n    };\r\n}\r\n\r\nexport const getTdContent = (row, column, rowIndex, columnIndex, spanMethod) => {\r\n    const { type } = column;\r\n\r\n    const value = getCellValue(row, column, rowIndex, columnIndex);\r\n\r\n    const { cellStyle: td_style, imageProps } = getCellProps(value, row, column, rowIndex, columnIndex);\r\n\r\n    // 合并单元格处理\r\n    const { content: span_content, needDelete } = getSpanContent(spanMethod, { row, column, rowIndex, columnIndex });\r\n\r\n    if (needDelete) return '';\r\n\r\n    if (!value) return `<td ${span_content} style=\"${td_style}\"></td>`;\r\n\r\n    if (type === CELL_TYPE.IMAGE) {\r\n        return `<td ${span_content} style=\"${td_style}\"><img src=\"${value}\" width=\"${imageProps.width}\" height=\"${imageProps.height}\" /></td>`;\r\n    }\r\n    else {\r\n        return `<td ${span_content} style=\"${td_style}\"><span>${value}</span></td>`;\r\n    }\r\n}\r\n","import { getTdContent } from \"./cell\";\r\n\r\nconst getRowHeightString = ({ row, rowIndex, rowHeight }) => {\r\n    if (!rowHeight) return '';\r\n\r\n    let height = \"\";\r\n\r\n    if (typeof rowHeight === 'number') {\r\n        height = rowHeight;\r\n    }\r\n    else if (typeof rowHeight === 'function') {\r\n        height = rowHeight({ row, rowIndex });\r\n    }\r\n\r\n    return `height=\"${height}\"`;\r\n}\r\n\r\nexport const createBodyString = (columns, rows, spanMethod, rowHeight) => {\r\n    let tbody = '<tbody>';\r\n\r\n    const rows_len = rows.length;\r\n    const columns_len = columns.length;\r\n\r\n    for (let i = 0; i < rows_len; i++) {\r\n        const row = rows[i];\r\n\r\n        const row_height_str = getRowHeightString({ row, rowIndex: i, rowHeight });\r\n\r\n        tbody += `<tr ${row_height_str}>`;\r\n\r\n        for (let j = 0; j < columns_len; j++) {\r\n            const column = columns[j];\r\n            tbody += getTdContent(row, column, i, j, spanMethod);\r\n        }\r\n\r\n        tbody += '</tr>';\r\n    }\r\n\r\n    tbody += '</tbody>';\r\n\r\n    return tbody;\r\n}","import { DEFAULTS } from \"./constant\";\r\nimport { serializeStyle } from \"./utils\";\r\n\r\nconst BASE64_PREFIX = 'data:application/vnd.ms-excel;base64,';\r\nconst TEMPLATE =\r\n    `<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <!--[if gte mso 9]>\r\n            <xml>\r\n                <x:ExcelWorkbook>\r\n                    <x:ExcelWorksheets>\r\n                        <x:ExcelWorksheet>\r\n                            <x:Name>{worksheet}</x:Name>\r\n                            <x:WorksheetOptions>\r\n                                <x:DisplayGridlines/>\r\n                            </x:WorksheetOptions>\r\n                        </x:ExcelWorksheet>\r\n                    </x:ExcelWorksheets>\r\n                </x:ExcelWorkbook>\r\n            </xml>\r\n            <![endif]-->\r\n        </head>\r\n        <body>\r\n            <table style=\"{style}\">{table}</table>\r\n        </body>\r\n    </html>`;\r\n\r\nconst base64 = (s) => window.btoa(unescape(encodeURIComponent(s)));\r\n\r\nconst format = (s, c) => s.replace(/{(\\w+)}/g, (m, p) => c[p]);\r\n\r\nexport default ({ table, sheetName, fileName, style }) => {\r\n\r\n    const ctx = {\r\n        worksheet: sheetName || DEFAULTS.DEFAULT_SHEET_NAME,\r\n        table,\r\n        style: serializeStyle({\r\n            ...DEFAULTS.TABLE_STYLE,\r\n            ...style\r\n        })\r\n    }\r\n\r\n    // 创建下载\r\n    let link = document.createElement('a');\r\n    link.setAttribute('href', BASE64_PREFIX + base64(format(TEMPLATE, ctx)));\r\n    link.setAttribute('download', fileName || DEFAULTS.DEFAULT_FILE_NAME);\r\n    link.click();\r\n}","import { serializeStyle } from \"./utils\";\r\n\r\nexport const createExtraBlockString = (columns, blockTag) => {\r\n    const ths = columns.map(column => {\r\n        const { label, width, style, span } = column;\r\n\r\n        const styleStr = serializeStyle(style);\r\n\r\n        let spanContent = '';\r\n\r\n        if (span) {\r\n            const { colspan, rowspan } = span;\r\n            if (colspan === 0 && rowspan === 0) {\r\n                return '';\r\n            }\r\n            spanContent = `${colspan ? ('colspan=\"' + colspan + '\"') : ''}${rowspan ? ('rowspan=\"' + rowspan + '\"') : ''}`;\r\n        }\r\n\r\n        return `<th ${spanContent} style=\"${styleStr}\" width=\"${width}\"> ${label} </th>`;\r\n    })\r\n\r\n    return `<${blockTag}><tr>${ths.join('')}</tr></${blockTag}>`;\r\n}","import { createBodyString } from './body';\r\nimport { createHeaderString } from './header';\r\nimport startExport from './export';\r\nimport { createExtraBlockString } from './extra';\r\n// import startExportIE from './exportIE';\r\n\r\nexport default ({ columns, data, fileName, sheetName, style, spanMethod, topRows = [], bottomRows = [], rowHeight, showHeader = true }) => {\r\n    const extraHeaders = (topRows || []).map(columns => createExtraBlockString(columns, 'thead')).join('');\r\n\r\n    const thead = showHeader ? createHeaderString(columns) : '';\r\n\r\n    const tbody = createBodyString(columns, data, spanMethod, rowHeight);\r\n\r\n    const extraFooters = (bottomRows || []).map(columns => createExtraBlockString(columns, 'tfoot')).join('');\r\n\r\n    const table = extraHeaders + thead + tbody + extraFooters;\r\n\r\n    startExport({\r\n        table,\r\n        fileName,\r\n        sheetName,\r\n        style\r\n    });\r\n}","import { serializeStyle } from \"./utils\";\r\n\r\nexport const createHeaderString = (columns) => {\r\n    const ths = columns.map(column => {\r\n        const { label, width, style, span } = column;\r\n\r\n        const styleStr = serializeStyle(style);\r\n\r\n        let spanContent = '';\r\n\r\n        if (span) {\r\n            const { colspan, rowspan } = span;\r\n            if (colspan === 0 && rowspan === 0) {\r\n                return '';\r\n            }\r\n            spanContent = `${colspan ? ('colspan=\"' + colspan + '\"') : ''}${rowspan ? ('rowspan=\"' + rowspan + '\"') : ''}`;\r\n        }\r\n\r\n        return `<th ${spanContent} style=\"${styleStr}\" width=\"${width}\"> ${label} </th>`;\r\n    })\r\n\r\n    return `<thead><tr>${ths.join('')}</tr></thead>`;\r\n}"],"names":["CELL_TYPE","DEFAULTS","serializeStyle","style","_typeof","Object","entries","map","_ref","_ref2","_slicedToArray","key","value","filter","i","join","getCellProps","row","column","rowIndex","columnIndex","type","cellStyle","width","imageHeight","imageWidth","undefined","composeStyle","_objectSpread","imageProps","ctx","getImageWidth","height","getImageHeight","getTdContent","spanMethod","formatter","prop","getCellValue","td_style","_getCellProps","getSpanContent","spanResult","rowspan","colspan","content","needDelete","span_content","concat","getRowHeightString","rowHeight","startExport","c","table","sheetName","fileName","worksheet","link","document","createElement","setAttribute","s","window","btoa","unescape","encodeURIComponent","base64","replace","m","p","click","createExtraBlockString","columns","blockTag","ths","label","span","styleStr","spanContent","data","_ref$topRows","topRows","_ref$bottomRows","bottomRows","_ref$showHeader","showHeader","extraHeaders","thead","createHeaderString","tbody","rows","rows_len","length","columns_len","row_height_str","j","createBodyString","extraFooters"],"mappings":"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"}